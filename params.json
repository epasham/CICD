{"name":"Cicd","tagline":"Continuous integration testing","body":"continuous integration testing\r\n=====================================================\r\n\r\n!!! This docker container should only be used as a test platform !!!\r\n\r\nThis docker container bundles all the needed pre-configured pieces to experiments the Zuul gating system used by the Openstack project. Zuul is a generic software and can be reused for other projects outside of Openstack.\r\n\r\nThis docker container is based on a centos7 image and contains:\r\n\r\nGerrit\r\nZuul\r\nJenkins\r\nJenkins-job-builder\r\nUse Fedora 21 Cloud as Docker host\r\n\r\nThe easiest way to start with Docker is to use a Fedora 21 Cloud image. Start the image and execute the following commands to install Docker and other requirements:\r\n\r\n$ sudo yum install https://get.docker.com/rpm/1.7.0/fedora-21/RPMS/x86_64/docker-engine-1.7.0-1.fc21.x86_64.rpm\r\n$ sudo service docker start\r\n$ sudo docker run hello-world\r\n$ sudo yum install git python-pip\r\nServices\r\n\r\nUse ci.localdomain to access the services. It means you should add such a line in your laptop /etc/hosts:\r\n\r\nci.localdomain\r\n\r\nJenkins\r\n\r\nOnly a Jenkins master is configured here. The Jenkins Gearman plugin is pre-configured to connect on the Zuul gearman server.\r\n\r\nA default user \"jenkins/password\" is pre-configured in order to allow to perform administrative tasks on Jenkins. This is needed in order to use Jenkins Jobs Builder to manage jobs on Jenkins.\r\n\r\nJenkins Jobs Builder is pre-configured and can be used locally to update jobs.\r\n\r\nJenkins can be reached at http://ci.localdomain:8081/jenkins\r\n\r\nBuild and start\r\n\r\nInstall Docker at least 1.6 and build the container:\r\n\r\n$ sudo docker build -t exzuul .\r\nStart the container:\r\n\r\n$ sudo docker run -d -h ci.localdomain -v /dev/urandom:/dev/random -p 80:80 -p 29418:29418 -p 8080:8080 -p 8081:8081 exzuul\r\n$ CID=$(sudo docker ps | grep exzuul | cut -f1 -d' ')\r\nGet a live shell inside a running container:\r\n\r\n$ sudo docker exec -i -t $CID /bin/bash\r\nGet the container IP:\r\n\r\n$ sudo docker inspect --format '{{ .NetworkSettings.IPAddress }}' $CID\r\nYou should access the container using ci.localdomain hostname instead of the IP. Please add \" ci.localdomain\" in /etc/hosts.\r\n\r\nWARNING: If the container is stopped and restarted all local work and configuration will be lost.\r\n\r\nConfigure a first project to be validated via Zuul\r\n\r\nHere is the first steps to perform in order to have a project hosted on Gerrit and a job triggered by Zuul.\r\n\r\nLogin to Gerrit as the admin user. Add your public key in the admin user settings page. If you don't have a key yet, create one:\r\n$ ssh-keygen\r\n$ cat ~/.ssh/id_rsa.pub\r\nCreate a Job in Jenkins for \"testproject\" using the following command. The container already has a valid JJB configuration with a working job definition for \"testproject\".\r\n$ sudo docker exec -i -t $CID /bin/bash\r\n# # Create a job in Jenkins for a project call \"testproject\"\r\n# jenkins-jobs --conf /etc/jenkins_jobs/jenkins_jobs.ini update /etc/jenkins_jobs/jobs\r\nThe job \"testproject-unit-tests\" must be shown in the Jenkin job list\r\nAs admin - create a project called \"testproject\" in Gerrit (check \"create inital empty commit\")\r\nClone the new project on your local computer and submit the as a review\r\n$ git clone http://ci.localdomain:8080/testproject\r\n$ cd testproject\r\n$ git checkout -b \"first_commit\"\r\n$ cat > .gitreview << EOF\r\n[gerrit]\r\nhost=ci.localdomain\r\nport=29418\r\nproject=testproject.git\r\nEOF\r\n$ cat > run_tests.sh << EOF\r\n#!/bin/bash\r\nexit 0\r\nEOF\r\n$ chmod +x run_tests.sh\r\n$ sudo pip install git-review\r\n$ touch \"$HOME/.ssh/known_hosts\"\r\n$ ssh-keygen -f \"$HOME/.ssh/known_hosts\" -R [ci.localdomain]:29418\r\n$ git review -s # use \"admin\" as login and be sure to have the public key listed by ssh-add -l\r\n$ git config --add gitreview.username \"admin\"\r\n$ git add run_tests.sh .gitreview\r\n$ git commit -m \"first commit\"\r\n$ git review\r\nIn the Gerrit web UI you should see your new patch on \"testproject\" and a green check sign added by Zuul in the \"Verified\" label.\r\n\r\nGerrit\r\n\r\nGerrit is configured with \"DEVELOPMENT_BECOME_ANY_ACCOUNT\" setting so no need to deal with any external authentication system. Also a local H2 database is used.\r\n\r\nTwo users are created by default:\r\n\r\nAn admin user\r\nA Zuul user (to allow the zuul to perform action on Gerrit)\r\nGerrit can be reached at http://ci.localdomain:8080\r\n\r\nZuul\r\n\r\nZuul is pre-configured to listen to events from the Gerrit event stream and will connect to Gerrit at container startup. Zuul's merger git repositories are served via a pre-configured Apache.\r\n\r\nlayout.yaml is stored at /etc/zuul/layout.yaml. Two pipeline (check and gate) are already configured.\r\n\r\nZuul status page can be reached at http://ci.localdomain\r\n\r\nnodepool\r\n\r\nnodepool is used to interactive with openstack cloud, it cloud spwan instances according nodepool.yaml and scriptes which you assign,there are something must be reviewed. Document: http://docs.openstack.org/infra/nodepool/ NOTICE: cron: check: '/15 * * ' cleanup: '/5 * * ' image-update: '10 2 * '\r\n\r\ncheck 、cleanup and image-update means the dateline that nodepool perform the operation.\r\n\r\ndburi: 'sqlite:////tmp/nodepool/nodepool'\r\n\r\nIt appears that you need a database which named nodepool,absolutely you could get other names.\r\n\r\ngearman-servers: - host: 127.0.0.1\r\n\r\nzmq-publishers: - tcp://127.0.0.1:8888\r\n\r\nyou must be check jenkins plugin,make sure gearman plugin and zmq-publishers be installed.\r\n\r\nlabels: - name: bare-trusty image: bare-trusty min-ready: 3 providers: - name: centos - name: bare-precise min-ready: 3 image: bare-precise providers: - name: centos - name: bare-bcec min-ready: 1 image: bare-bcec providers: - name: centos\r\n\r\nlabels name using for bind to jenkins project, which you could create a project including 'node' key\r\n\r\nproviders: - name: centos auth-url: 'http://10.134.1.3:35357/v2.0' boot-timeout: 120 region-name: 'RegionOne' service-name: 'nova' service-type: 'compute' project-id: admin username: 'admin' password: '123456' pool: 'cicd' max-servers: 15 images: - name: bare-trusty base-image: 'centos7' min-ram: 4000 name-filter: 'cicd' private-key: /root/.ssh/id_rsa setup: base.sh username: root - name: bare-precise base-image: 'centos7' name-filter: 'cicd' min-ram: 4000 private-key: '/root/.ssh/id_rsa' setup: base.sh username: root networks: - net-id: 9995e58c-127d-4361-b2aa-31c21c021dfd availability-zones: - nova\r\n\r\nnet-id: you need interal-net id pool: you provider floating-ip id\r\n\r\ntargets: - name: centos jenkins: apikey: xQgKJUYdM6JskzwQdSTLF_EOGNN80Cto credentials-id: 4f98191e-efbb-4ac4-8131-0e4a8bb2ce14 url: http://jenkins.tests.dom:8080/jenkins/ user: 'jenkins'\r\n\r\napikey: it could find using jenkins web credentials-id: find in crendentials.xml, when you create a credential ,you need put /root/.ssh/id_rsa into blanke and cat /roo/.ssh/id_rsa.pub into /etc/nodepool/script/ authorize_key","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}